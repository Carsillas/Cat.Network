<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Cat.Network {
	public partial class NetworkEntity {

<#= GetMulticastInvoke(0)#>
<#= GetMulticastInvoke(1)#>
<#= GetMulticastInvoke(2)#>
<#= GetMulticastInvoke(3)#>
<#= GetMulticastInvoke(4)#>
<#= GetMulticastInvoke(5)#>
<#= GetMulticastInvoke(6)#>
<#= GetMulticastInvoke(7)#>
<#= GetMulticastInvoke(8)#>

	}
}


<#
	string GetMulticastInvoke(int count) {
		StringBuilder builder = new();

		string genericArguments = count > 0 ? $"<{GetGenericParameters(count)}>" : "";
		string conditionalComma = count > 0 ? "," : "";

		builder.AppendLine(@$"
		protected void Multicast{genericArguments}(Action{genericArguments} Multicast{conditionalComma} {string.Join(", ", Enumerable.Range(1, count).Select(value => $"T{value} _{value}"))}) {string.Join(" ", Enumerable.Range(1, count).Select(value => $"where T{value} : IEquatable<T{value}>"))}
        {{

			if (!IsOwner) {{
				throw new InvalidOperationException(""Cannot execute multicast RPC from non-owning client"");
			}}

			Multicast({string.Join(", ", Enumerable.Range(1, count).Select(value => $"_{value}"))});

		    if (Multicast.Target != this)
            {{
                throw new Exception(""Multicast Invoked on incorrect object!"");
            }}

            using (MemoryStream stream = new MemoryStream(256))
            {{
                using (BinaryWriter writer = new BinaryWriter(stream))
                {{
					writer.Write((byte)RequestType.Multicast);
					writer.Write(NetworkID.ToByteArray());
					Serializer.WriteMulticastID(writer, Multicast.Method);
					{GetSerializeCalls(count)}

					Serializer.WriteOutgoingRPCInvocation(stream.ToArray());
				}}
			}}
        }}");

		return builder.ToString();
	}

	string GetGenericParameters(int count) {
		return string.Join(", ", Enumerable.Range(1, count).Select(value => $"T{value}"));
	}
			
	string GetInvokeCall(int count) {
		return $@"
			methodInfo.Invoke(this, new object[] {{ {string.Join(", ", Enumerable.Range(1, count).Select(Value => $"_{Value}"))} }});";
	}
	
	string GetSerializeCalls(int count) {
		StringBuilder builder = new();

		for(int i = 1; i <= count; i++) {
			builder.Append($@"
					Serializer.SerializationContext.GetSerializationFunction<T{i}>()(writer, _{i});");
		}
		return builder.ToString();
	}
	
	string GetDeserializeCalls(int count) {
		StringBuilder builder = new();

		for(int i = 1; i <= count; i++) {
			builder.Append($@"
			T{i} _{i} = Serializer.SerializationContext.GetDeserializationFunction<T{i}>()(reader, null);");
		}
		return builder.ToString();
	}

#>